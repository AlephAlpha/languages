#!/usr/bin/python
"""script to generate a `docker-bake.json` file to be used with `docker buildx bake`

See https://docs.docker.com/engine/reference/commandline/buildx_bake/ for more info.

Run it like `find . -name Dockerfile | ./knead`, and then run `docker buildx bake`.
"""
from collections import defaultdict
from datetime import datetime
import glob
import json
import os.path
import re
import sys

assert __name__ == "__main__"

all_targets = {}
dependents = defaultdict(set)

now = datetime.utcnow().strftime("%Y-%m-%d-%H-%M-%S")

for dockerfile in glob.iglob("./**/Dockerfile", recursive=True):
    context = os.path.dirname(dockerfile)
    name = os.path.basename(context)
    tag_base = f"attemptthisonline/{name}:"
    assert name not in all_targets, "duplicate dockerfiles"
    all_targets[name] = {
        "context": context,
        "contexts": {},  # i.e., dependencies (see https://github.com/docker/buildx/blob/master/docs/reference/buildx_bake.md#using-a-result-of-one-target-as-a-base-image-in-another-target)
        "tags": [tag_base + "latest", tag_base + now],
    }
    with open(dockerfile) as f:
        for m in re.finditer(r"^\s*FROM\s+attemptthisonline/(\S+).*$", f.read(), re.M):
            dependency = m.group(1)
            all_targets[name]["contexts"]["attemptthisonline/" + dependency] = "target:" + dependency
            dependents[dependency].add(name)


def find_all_dependents(xs, *trail):
    for x in xs:
        if x in trail:
            print(f"knead: warning: dependency cycle with {x}", file=sys.stderr)
            return
        task_targets[x] = all_targets[x]
        find_all_dependents(dependents[x], *trail, x)


task_targets = {}
find_all_dependents(os.path.basename(os.path.dirname(line.strip())) for line in sys.stdin)

if len(task_targets) == 0:
    # no files inputted
    print("knead: warning: no files inputted", file=sys.stderr)
    exit(1)

data = {
    "group": {
        "default": {
            "targets": list(task_targets.keys()),
        },
    },
    "target": task_targets,
}

with open("docker-bake.json", "w") as f:
    json.dump(data, f)
